
25) Tag Video: Atributos
src = source = Fonte
controls = controles de Video
autoplay = carregamento automatico
muted = mutado
loop = loop infinito do video
poster = mudar de imagem do inicio do video
preload = "auto" "metadata" "none" carregamento de dados
Pausar = Pausa o video no momento exato onde palavraProcurada
Stop = Pausa o video e retrocede para o inicio dele = .currentTime = 0
Diminuir ou aumentar a velocidade = .playbackRate += ou  -= 0.3
Full Screen = .resquestFullscreen

26) IFRAME = Uma forma de colocar um conteudo de uma outra pagina, na pagina que quiser, é mais utilizado para videos do youtube

27) CANVAS: FORMA PARA DESENHOS, UMA TELA ONDE PODEMOS DESENHAR, E UMA FORMA DE DEIXAR MAIS FLUIDO 
.moveto(0(x),0(y)) = ponto inicial do pincel
.lineto(250(x),250(y)) = desenhar uma linha até tal ponto
.linewidth = largura da linha
.stroke = expessura da linha
.strokeStyle = modificando a cor

28) PSEUDOELEMENTOS : COMANDOS QUE PERMITEM QUE MUDEMOS UMA PARTE DOS ELEMENTOS
:: indicam que irei utilizar os pseudoelementos
::first-line = definir o estilos para o primeiro elemento
::first-lettter = primeira letra 
::before = adcionar um conteudo antes do elemento
::after = adcionar um conteudo depois do elemento
::selection = isto é quando clicamos em algum elemento com o mouse fixo
content = adcionar esses conteudos

29) SELETORES: Formas de selecionar algum elemento
* seletor que seleciona todos os elementos da pagina
.p2,h2{   ------- seelciona a classe e o h2
            background-color: green;
        }
div p {   ---- SELECIONA TODOS OS PARAGRAFOS DA DIV
    background-color = "red"
}
#head > p{} ------ seleciona os elementos que estão direatamente ligados ao id
#head + p{} ------ pega os elementos p que esão apos o nosso head
header ~ p {}----- pegar todos os elenentos que sucedam um header por exemplo
[width] = irá pegar todos os elenentos que estamos utlizando no atributo
[title^="t"]{} ---- seleciona os que começam com a letra inicial
[title$="1"]{} ---- seleciona os que terminarem com o numero escolhido

30)PSEUDO CLASSES : TIPOS DE SELETORES
:focus = irá focar no elemento que clicarmos
:first-child
:first-of-type = primeiro do seu tipo dentro do elemento pai
:nth-child() = pega qualquer filho do elemento pai
:nth-of-type = escolhe manualmente o elemento so seu tipo
:last-child
:last-of-type
even = numeros pares 
odd = numeros impares 

31) FUNÇÃO CALC : PERMITIR CALCULAR COM PORCENTAGENS
calc(100% - 100px)  100% de largura - 100px de margin(50px right + 50 px left)

32) TRANSFORMAÇÕES EM IMAGENS: transform
rotate(45deg) = girar em 45° graus
scale(2) = x(numero) do tamanho da imagem
skew(45deg) = deixa a imagem com as pontas em 45 deg, não gira a imagem toda

33) COMPATIBILIDADE DE NAVEGADORES:
Usar o "Can i use" para verificar os navegadores: -webkit;-moz;-ms

34) Variaveis em CSS:
:root{
    --var_color: red
} = html
.div{ color: var(--var_color)}

35) FLEXBOX: FLEX DIRECTION = dentro do elemento pai
elementos flexiciveis para se adaptar ao elemento pai
div: tem display block por padrao
flex-direction: vem por padrao row = linha
-column and row
-column-reverse and row-reverse = inverter

FLEXBOX = WRAP
Manterá a mesma proporção de tamanho sem diminuir e quebrará as linhas para caber
-wrap-reverse

FLEXBOX: FLEX-FLOW: FLEX DIRECTION + WRAP 
flex-flow : column wrap 

FLEXBOX: JUSTIFY-CONTENT 
space-evently = espaçamento entre os itens da div estarão igual, da borda té os espaçamentos entre os itens

FLEXBOX: ALIGN-ITENS alinha os itens dentro da div
stretch = tenterá preencher todo o item

FLEXBOX: ALIGN-CONTENT
Pega os itens e deixa sem espaçamento entre eles = como se criasse uma div entre os itens

FLEXBOX: GROW/SHRINK UTILIZANDO ELES NOS ELEMENTOS FILHOS
Shrink = encolhe ao diminuir a tela; recebe 0 ou 1 
grow = por padrao é zero, não pode aumentar; 1 aumenta ao expandir a tela

FLEXBOX: ORDER
ordena os itens a onde quiser ; order: 1; i´ra substituir o elemento 1

FLEXBOX : ALIGN-SELF
Utilizado apenas no elemento filho

36) GRID: DIVIDIDAS EM COLUNAS E LINHAS
display: grid ----- Só se utiliza no elemento Pai
grid-template-rows && grid-template-columns = auto = irá se adaptar ao tamanho da tela/elemento; 50% && 50px && 1fr 2fr 1fr
RESUMIDO: GRID-TEMPLATE = (LINHAS) / (COLUNAS)

GRID: ESPAÇAMENTO ENTRE AS GRIDS
grid-row-gap = espaçamento das linhas entre eles
grid-column-gap = espaçamento das colunas entre eles
Resumido = gap : 10px

GRID: JUSTIFY E ALIGN-ITEMS = mexe com os itens
justify-content o grupo de células em relação ao seu container e o justify-items alinha os itens internos em relação a suas células, o mesmo vale para o align.
justify-items = o mesmo que justify-content no flexbox HORIZONTAL
align-items = alinhamento na VERTICAL
strech = preenche todo o espaço

GRID: JUSTIFY E ALIGN-CONTENT = mexe com o conteudo dentro da div

GRID: TEMPLATE AREA
Um modo para fazer linhas e colunas 

GRID: 
grid-column-start = onde começa a colunas
grid-column-end = onde termina a coluna 
grid-row-start = onde inicia a linha 
grid-row-end = onde termina a linha
span = se utiliza aqui para se expandir colunas ou linha; por exemplo : 
grid-column-end : span 4 = a coluna vai do elemento que esta, até a coluna 4 esticando

37) ANIMAÇÕES EM CSS : KEYFRAMES
@keyframes changeColor{
            from {background-color: red;} --- ESTADO INICIAL
            to{background-color: blue;}   --- ESTADO FINAL
            0%{background-color: red;} --- ESTADO INICIAL
            23%{background-color:purple; width:400px margin: auto; border-radius: 50%;} ---- MUDANDO O FORMATO DAS ANIMAÇÕES
            50%{background-color: green;}
            100%{background-color: yellow;} --- ESTADO FINAL

        }
animation-name: changeColor; --- chamar a função keyFrame
animation-duration: 5s; --- duração da animação
animation-delay = uma demora a mais para aparecer o elemento
animation-iteration-count: infinite 2; ---- Contagem de quantas vezes a animação será feita
animation-direction: reverse alternate;
animation-fill-mode: both(em ambos) forwards backward; ---- Deixa o fim da animação com a cor ou animação do inicio
MODO CURTO : animation: name duration timing-function delay iteration-count direction fill-mode;

time-function = uma propriedade que define a velocidade da animação
linear; velocidade a mesma do inicio ao fim
ease; devagar rapido devagar
ease-in; o mais devagar
ease-out; um pouco mais rapido que o linear
ease-int-out; devagar menos que o ease

TRANSITIONS:
-transition-property: background-color,padding; --- as propriedades que desejamos acrescentar
se quiser aumentar todas propriedades : transition-property: all
-transition-duration:500ms ;
-transition-delay: 1s;
- DE FORMA RESUMIDA: transition: background-color 500ms, padding 3s;

